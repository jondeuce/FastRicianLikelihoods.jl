#### Gaussian quadrature, positive real line

module GaussHalfHermite

using LinearAlgebra: SymTridiagonal, Tridiagonal, eigen, ldiv!
using SpecialFunctions: gamma, loggamma

# Recursion base cases
alpha‚ÇÄ(Œ≥) = Œ≥ < 25 ? gamma(Œ≥ / 2 + 1) / gamma((Œ≥ + 1) / 2) : exp(loggamma(Œ≥ / 2 + 1) - loggamma((Œ≥ + 1) / 2))
beta‚ÇÄ(Œ≥) = zero(Œ≥)

function g‚ÇÄ‚ÇÅ(Œ≥)
    g‚ÇÄ = -Œ≥ / 12
    g‚ÇÅ = (5Œ≥ + 4) / 12 - alpha‚ÇÄ(Œ≥)^2
    return g‚ÇÄ, g‚ÇÅ
end

# Equation 3.2: Œ±_{n}^2 = (2n + Œ≥ + 1)/3 - g_{n+1} - g_{n} = (Y + 1)/3 - g_{n+1} - g_{n}
alpha‚Çô¬≤(n, Œ≥, g‚Çô, g‚Çô‚Çä‚ÇÅ) = (Y‚Çô(n, Œ≥) + 1) / 3 - g‚Çô‚Çä‚ÇÅ - g‚Çô

# Equation 3.3: Œ≤_{n} = (n + Œ≥/2) / 6 + g_{n} = Y / 12 + g_{n}
beta‚Çô(n, Œ≥, g‚Çô) = Y‚Çô(n, Œ≥) / 12 + g‚Çô

# Equation 3.4
Y‚Çô(n, Œ≥) = 2 * n + Œ≥

# Equation 3.7, asymptotic limit (valid for all `Œ≥` for suitably large `n`)
g‚Çô_limit(n, Œ≥) = (2 - 9Œ≥^2) / (72 * Y‚Çô(n, Œ≥))

# Improvement on Equation 3.7 (empirically never worse for any `n` for `Œ≥ ‚™Ü 2.5`, and much better for `Œ≥ ‚â´ 2.5`)
function g‚Çô_large_Œ≥(n, Œ≥)
    Y = Y‚Çô(n, Œ≥)
    return (2 - 9Œ≥^2) / (72 * (Y + Œ≥^2 / (Y + Œ≥)))
end

# Equation 3.9-3.13, asymptotic limit (valid for small `Œ≥` and large `n`)
function g‚Çô_asy(n, Œ≥)
    Y = Y‚Çô(n, Œ≥)
    Y‚Åª¬≤, Œ≥¬≤ = 1 / Y^2, Œ≥^2
    T = typeof(Y‚Åª¬≤)
    C‚ÇÄ = evalpoly(Œ≥¬≤, (T(1 // 36), T(-1 // 8)))
    C‚ÇÅ = evalpoly(Œ≥¬≤, (T(23 // 432), T(-11 // 48), T(3 // 32)))
    C‚ÇÇ = evalpoly(Œ≥¬≤, (T(1189 // 2592), T(-409 // 192), T(75 // 64), T(9 // 64)))
    C‚ÇÉ = evalpoly(Œ≥¬≤, (T(196057 // 20736), T(-153559 // 3456), T(7111 // 256), T(639 // 128), T(135 // 512)))
    return evalpoly(Y‚Åª¬≤, (C‚ÇÄ, C‚ÇÅ, C‚ÇÇ, C‚ÇÉ)) / Y
end

# Solving Equation 3.5 for g‚Çô‚Çä‚ÇÅ
function g‚Çô‚Çä‚ÇÅ_rec(n, Œ≥, g‚Çô‚Çã‚ÇÅ, g‚Çô)
    Y = Y‚Çô(n, Œ≥)
    g‚Çô‚Çä‚ÇÅ = (
        24g‚Çô * (Y^2 + 18g‚Çô^2) * (2Y - 3g‚Çô) -
        (Y + 12g‚Çô)^2 * (3Y * (2g‚Çô + g‚Çô‚Çã‚ÇÅ) - 9g‚Çô * (g‚Çô + g‚Çô‚Çã‚ÇÅ) + 3g‚Çô‚Çã‚ÇÅ + 1) +
        (3Œ≥ / 2)^2 * (2 * (Y - 6g‚Çô)^2 - (3Œ≥ / 2)^2)
    ) / (
        3 * (Y + 12g‚Çô)^2 * (Y - 3 * (g‚Çô + g‚Çô‚Çã‚ÇÅ) - 1)
    )
    return g‚Çô‚Çä‚ÇÅ
end

# Returns length `n+1` vector `g` containing `[g‚ÇÄ, g‚ÇÅ, ..., g‚Çô]`
function g_init!(g, Œ≥; asymptotic)
    N = length(g) - 1
    g‚Çô‚Çã‚ÇÅ, g‚Çô = g‚ÇÄ‚ÇÅ(Œ≥)
    N >= 0 && (g[1] = g‚Çô‚Çã‚ÇÅ)
    N >= 1 && (g[2] = g‚Çô)

    for i in 3:N+1
        n = i - 2

        if n >= asymptotic
            g‚Çô‚Çä‚ÇÅ = Œ≥ < 2.5 ? g‚Çô_asy(n + 1, Œ≥) : g‚Çô_large_Œ≥(n + 1, Œ≥)
        else
            g‚Çô‚Çä‚ÇÅ = g‚Çô‚Çä‚ÇÅ_rec(n, Œ≥, g‚Çô‚Çã‚ÇÅ, g‚Çô)
        end

        if Œ≥ >= 2.5 && n < asymptotic
            # Recurrence equation can fail badly for large `Œ≥`, and asymptotic limit can be inaccurate for moderate `n`
            # Detect if estimates have diverged and fall back to empirical estimate which is reasonably accurate for all `n` and `Œ≥ >= 2.5`
            g‚Çô‚Çä‚ÇÅ_est = g‚Çô_large_Œ≥(n + 1, Œ≥)
            abserr = abs(g‚Çô‚Çä‚ÇÅ - g‚Çô‚Çä‚ÇÅ_est)
            relerr = abserr / abs(g‚Çô‚Çä‚ÇÅ_est)
            if !isfinite(g‚Çô‚Çä‚ÇÅ) || min(abserr, relerr) > 0.05 # only switch if estimate is very bad, otherwise Newton handles it fine
                g‚Çô‚Çä‚ÇÅ = g‚Çô‚Çä‚ÇÅ_est
                asymptotic = n
            end
        end

        g‚Çô‚Çã‚ÇÅ, g‚Çô, g[i] = g‚Çô, g‚Çô‚Çä‚ÇÅ, g‚Çô‚Çä‚ÇÅ
    end

    return g
end
g_init(N, Œ≥; kwargs...) = g_init!(zeros(typeof(float(Œ≥)), N + 1), Œ≥; kwargs...)

# Equation 3.5: The nonlinear equation to solve for g_{n+1} and g_{n}
function F‚Çô(n, Œ≥, g‚Çô‚Çã‚ÇÅ, g‚Çô, g‚Çô‚Çä‚ÇÅ)
    # Equivalent version, but *much* less accurate, since g‚Çô^4 and Y^4 terms cancel out catestrophically
    #   F = ((Y + 1) / 3 - g‚Çô‚Çä‚ÇÅ - g‚Çô) * ((Y - 1) / 3 - g‚Çô - g‚Çô‚Çã‚ÇÅ) * (Y / 12 + g‚Çô)^2 - ((Y / 6 - g‚Çô)^2 - Œ≥^2 / 16)^2
    Y = Y‚Çô(n, Œ≥)
    F = (Y / 12 + g‚Çô)^2 * (
        g‚Çô‚Çä‚ÇÅ * (-Y + 3g‚Çô + 1 + 3g‚Çô‚Çã‚ÇÅ / 2) / 3 +
        g‚Çô‚Çã‚ÇÅ * (-Y + 3g‚Çô - 1 + 3g‚Çô‚Çä‚ÇÅ / 2) / 3
    ) - g‚Çô * (
        2Y * (-7Y^2 + 9Œ≥^2 + 4) + 3g‚Çô * (23Y^2 - 24Y * g‚Çô - 18Œ≥^2 + 16)
    ) / 432 +
        Y^2 * (9Œ≥^2 - 2) / 2592 - Œ≥^4 / 256
    return F
end

# Derivative of Equation 3.5 w.r.t. g_{n-1}, g_{n}, and g_{n+1}
function ‚àáF‚Çô(n, Œ≥, g‚Çô‚Çã‚ÇÅ, g‚Çô, g‚Çô‚Çä‚ÇÅ)
    Y = Y‚Çô(n, Œ≥)
    ‚àÇg‚Çô‚Çã‚ÇÅ = (Y + 12g‚Çô)^2 * (-Y + 3g‚Çô + 3g‚Çô‚Çä‚ÇÅ - 1) / 432
    ‚àÇg‚Çô = (Y - 6g‚Çô) * (2Y - 12g‚Çô - 3Œ≥) * (2Y - 12g‚Çô + 3Œ≥) / 216 + (Y + 12g‚Çô) * ((Y + 12g‚Çô) * (-2Y + 6g‚Çô + 3g‚Çô‚Çä‚ÇÅ + 3g‚Çô‚Çã‚ÇÅ) - 8 * (-Y + 3g‚Çô + 3g‚Çô‚Çã‚ÇÅ + 1) * (Y - 3g‚Çô - 3g‚Çô‚Çä‚ÇÅ + 1)) / 432
    ‚àÇg‚Çô‚Çä‚ÇÅ = (Y + 12g‚Çô)^2 * (-Y + 3g‚Çô + 3g‚Çô‚Çã‚ÇÅ + 1) / 432
    return (‚àÇg‚Çô‚Çã‚ÇÅ, ‚àÇg‚Çô, ‚àÇg‚Çô‚Çä‚ÇÅ)
end

function F!(F, g, Œ≥)
    N = length(g) - 1
    @assert length(F) == N - 2

    for i in 1:N-2
        n = i + 1
        g‚Çô‚Çã‚ÇÅ, g‚Çô, g‚Çô‚Çä‚ÇÅ = g[n], g[n+1], g[n+2] # note: g[n] = g‚Çô‚Çã‚ÇÅ
        F[i] = F‚Çô(n, Œ≥, g‚Çô‚Çã‚ÇÅ, g‚Çô, g‚Çô‚Çä‚ÇÅ)
    end

    return F
end

function J!(Jdiags, g, Œ≥)
    N = length(g) - 1
    @assert length.(Jdiags) == (N - 3, N - 2, N - 3)

    J‚Çã, J‚ÇÄ, J‚Çä = Jdiags
    for i in 1:N-2
        n = i + 1
        g‚Çô‚Çã‚ÇÅ, g‚Çô, g‚Çô‚Çä‚ÇÅ = g[n], g[n+1], g[n+2] # note: g[n] = g‚Çô‚Çã‚ÇÅ
        ‚àÇg‚Çô‚Çã‚ÇÅ, ‚àÇg‚Çô, ‚àÇg‚Çô‚Çä‚ÇÅ = ‚àáF‚Çô(n, Œ≥, g‚Çô‚Çã‚ÇÅ, g‚Çô, g‚Çô‚Çä‚ÇÅ)
        J‚ÇÄ[i] = ‚àÇg‚Çô
        i > 1 && (J‚Çã[i-1] = ‚àÇg‚Çô‚Çã‚ÇÅ)
        i < N - 2 && (J‚Çä[i] = ‚àÇg‚Çô‚Çä‚ÇÅ)
    end

    return Tridiagonal(J‚Çã, J‚ÇÄ, J‚Çä)
end

function g_newton!(Jdiags, F, g, Œ≥; maxiter=50, verbose=false)
    # `J` is tri-diagonal with size `(N - 2) √ó (N - 2)`, representing `‚àÇF·µ¢/‚àÇg‚±º` where `i,j ‚àà 2:N-1`
    # `F` has length `N - 2`, representing the `N - 2` equations `F‚Çô` used to determine `g‚Çô` where `n ‚àà 2:N-1`
    # `g` has length `N + 1`, representing `g‚Çô` where `n ‚àà 0:N`
    Œîg_norm_last = eltype(g)(Inf)
    Œîg_norm_decrease = zero(eltype(g))

    for i in 1:maxiter
        F = F!(F, g, Œ≥) # Recurrence equation F·µ¢ where `i ‚àà 2:N-1`
        J = J!(Jdiags, g, Œ≥) # Tridiagonal Jacobian ‚àÇF·µ¢/‚àÇg‚±º where `i,j ‚àà 2:N-1`
        Œîg = J \ F # TODO: in-place Tridiagonal solve?
        @views g[3:end-1] .-= Œîg # Update estimates for {g‚ÇÇ, g‚ÇÉ, ..., g_{N-1}}

        Œîg_norm = maximum(abs, Œîg)
        (i > 1) && (Œîg_norm_decrease = Œîg_norm / Œîg_norm_last)
        verbose && @info "iter $i:" F_norm = maximum(abs, F) Œîg_norm_decrease Œîg_norm

        (Œîg_norm_decrease >= 0.95 && Œîg_norm <= ‚àöeps(eltype(g))) && break
        Œîg_norm_last = Œîg_norm

        if i == maxiter
            @warn "Newton's method failed to converge in $maxiter iterations" F_norm = maximum(abs, F) Œîg_norm_decrease Œîg_norm
        end
    end

    return g
end

function g_newton(N, Œ≥; asymptotic, kwargs...)
    # Initial guess using recurrence relation, switching to asymptotic approximation when `n ‚â• asymptotic`
    g = g_init(N, Œ≥; asymptotic)
    F = similar(g, N - 2)
    Jdiags = (similar(g, N - 3), similar(g, N - 2), similar(g, N - 3))
    return g_newton!(Jdiags, F, g, Œ≥; kwargs...)
end

function g_heuristic(N, Œ≥)
    if N <= 1
        g‚ÇÄ, g‚ÇÅ = g‚ÇÄ‚ÇÅ(Œ≥)
        return N <= 0 ? [g‚ÇÄ] : [g‚ÇÄ, g‚ÇÅ]
    end

    # Two considerations here:
    #   1. Error œµ‚Çô in estimate g‚Çô decreases by factors of ~14 as we get away from the fixed g_{N}, i.e. |œµ‚Çô‚Çã‚ÇÅ / œµ‚Çô| ~ 14
    #   2. Asymptotic estimate for g_{N} is accurate to ~8 digits above N=9 in Float64
    # So if we compute ~10 extra g‚Çô, error in g_{N} should be less than 10^-8 / 14^10 ~ 10^-20.
    # In practice we get ~machine precision for all `N` when `Œ≥ ‚™Ö 2`, with slow loss of accuracy for large `Œ≥` when `N ‚™Ö Œ≥`.
    # For large Œ≥, it seems that computing another ~10 terms is necessary, but this has not been investigated thoroughly.
    Nnewt = N + (Œ≥ < 2.5 ? 10 : 20)
    g = g_newton(Nnewt, Œ≥; asymptotic=9)
    g = g[1:N+1] # note: g[n] = g‚Çô‚Çã‚ÇÅ

    return g
end

function gausshalfhermite_rec_coeffs(N, Œ≥)
    g = g_heuristic(N, Œ≥) # g‚ÇÄ, g‚ÇÅ, ..., g_{N}
    Œ± = zeros(eltype(g), N) # Œ≤‚ÇÄ, Œ≤‚ÇÅ, ..., Œ≤_{N-1}
    Œ≤ = zeros(eltype(g), N) # Œ≤‚ÇÄ, Œ≤‚ÇÅ, ..., Œ≤_{N-1}
    Œ±[1], Œ≤[1] = alpha‚ÇÄ(Œ≥), beta‚ÇÄ(Œ≥)
    g‚Çô, g‚Çô‚Çä‚ÇÅ = g[1], g[2]

    for n in 1:N-1
        g‚Çô, g‚Çô‚Çä‚ÇÅ = g‚Çô‚Çä‚ÇÅ, g[n+2]
        Œ±[n+1] = ‚àöalpha‚Çô¬≤(n, Œ≥, g‚Çô, g‚Çô‚Çä‚ÇÅ) # note: Œ±[n+1] = Œ±‚Çô
        Œ≤[n+1] = beta‚Çô(n, Œ≥, g‚Çô) # note: Œ≤[n+1] = Œ≤‚Çô
    end

    return Œ±, Œ≤
end

function gausshalfhermite_gw(N, Œ≥; normalize=false)
    # Golub-Welsch algorithm for computing nodes and weights from recurrence coefficients
    #   see: https://en.wikipedia.org/wiki/Gaussian_quadrature#The_Golub-Welsch_algorithm
    Œ≥ = float(Œ≥)
    T = typeof(Œ≥)
    Œ±, Œ≤ = gausshalfhermite_rec_coeffs(N, Œ≥)
    ùí• = SymTridiagonal(Œ±, sqrt.(Œ≤[2:end]))
    x, œï = eigen(ùí•) # eigenvalue decomposition
    w = abs2.(œï[1, :]) # quadrature weights

    IŒ≥ = gamma((Œ≥ + 1) / 2) / 2 # IŒ≥ = ‚à´_{0}^{‚àû} [x^Œ≥ exp(-x^2)] dx
    if normalize
        IŒ≥ *= exp2(Œ≥ / 2) / ‚àö(T(œÄ)) # IŒ≥‚Ä≤ = ‚à´_{0}^{‚àû} [x^Œ≥ exp(-x^2 / 2) / ‚àö(2œÄ)] dx = (2^(Œ≥/2) / ‚àöœÄ) * IŒ≥
        x .*= ‚àö(T(2))
    end
    w .*= (IŒ≥ / sum(w)) # ensure weights sum to `IŒ≥`

    return x, w
end

end # module GaussHalfHermite
