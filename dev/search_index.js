var documenterSearchIndex = {"docs":
[{"location":"#FastRicianLikelihoods","page":"Home","title":"FastRicianLikelihoods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FastRicianLikelihoods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#FastRicianLikelihoods.Rice","page":"Home","title":"FastRicianLikelihoods.Rice","text":"Rice(ν, σ)\n\nThe Rice distribution with shape parameter nu and scale parameter sigma.\n\nThe probability density function is\n\np(x mid nu sigma) = fracxsigma^2 expleft(-fracx^2 + nu^22sigma^2right) I_0left(fracxnusigma^2right)\n\nwhere I_0 is the modified Bessel function of the first kind of order zero, and x ge 0.\n\nExternal links\n\nRice distribution Wiki\n\n\n\n\n\n","category":"type"},{"location":"#FastRicianLikelihoods.besseli0-Tuple{Any}","page":"Home","title":"FastRicianLikelihoods.besseli0","text":"besseli0(x::T) where {T <: Union{Float32, Float64}}\n\nModified Bessel function of the first kind of order zero, I_0(x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.besseli0x-Tuple{Any}","page":"Home","title":"FastRicianLikelihoods.besseli0x","text":"besseli0x(x::T) where {T <: Union{Float32, Float64}}\n\nScaled modified Bessel function of the first kind of order zero, I_0(x) e^-x.\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.besseli1-Tuple{Any}","page":"Home","title":"FastRicianLikelihoods.besseli1","text":"besseli1(x::T) where {T <: Union{Float32, Float64}}\n\nModified Bessel function of the first kind of order one, I_1(x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.besseli1i0-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.besseli1i0","text":"besseli1i0(x::T) where {T <: Union{Float32, Float64}}\n\nRatio of modified Bessel functions of the first kind of orders one and zero, I_1(x)  I_0(x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.besseli1i0m1-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.besseli1i0m1","text":"besseli1i0m1(x::T) where {T <: Union{Float32, Float64}}\n\nRatio of modified Bessel functions minus one, I_1(x)  I_0(x) - 1.\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.besseli1i0x-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.besseli1i0x","text":"besseli1i0x(x::T) where {T <: Union{Float32, Float64}}\n\nRatio of modified Bessel functions divided by argument, (I_1(x)  I_0(x))  x.\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.besseli1x-Tuple{Any}","page":"Home","title":"FastRicianLikelihoods.besseli1x","text":"besseli1x(x::T) where {T <: Union{Float32, Float64}}\n\nScaled modified Bessel function of the first kind of order one, I_1(x) e^-x.\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.besseli2-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.besseli2","text":"besseli2(x::T) where {T <: Union{Float32, Float64}}\n\nModified Bessel function of the first kind of order two, I_2(x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.besseli2x-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.besseli2x","text":"besseli2x(x::T) where {T <: Union{Float32, Float64}}\n\nScaled modified Bessel function of the first kind of order two, I_2(x) e^-x.\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.logbesseli0-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.logbesseli0","text":"logbesseli0(x::T) where {T <: Union{Float32, Float64}}\n\nLog of modified Bessel function of the first kind of order zero, log I_0(x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.logbesseli0x-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.logbesseli0x","text":"logbesseli0x(x::T) where T <: Union{Float32, Float64}\n\nLog of scaled modified Bessel function of the first kind of order zero, log(I_0(x) e^-x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.logbesseli1-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.logbesseli1","text":"logbesseli1(x::T) where {T <: Union{Float32, Float64}}\n\nLog of modified Bessel function of the first kind of order one, log I_1(x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.logbesseli1x-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.logbesseli1x","text":"logbesseli1x(x::T) where {T <: Union{Float32, Float64}}\n\nLog of scaled modified Bessel function of the first kind of order one, log(I_1(x) e^-x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.logbesseli2-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.logbesseli2","text":"logbesseli2(x::T) where {T <: Union{Float32, Float64}}\n\nLog of modified Bessel function of the first kind of order two, log I_2(x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.logbesseli2x-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.logbesseli2x","text":"logbesseli2x(x::T) where {T <: Union{Float32, Float64}}\n\nLog of scaled modified Bessel function of the first kind of order two, log(I_2(x) e^-x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.neglogpdf_qrician","page":"Home","title":"FastRicianLikelihoods.neglogpdf_qrician","text":"neglogpdf_qrician(x::Real, ν::Real, logσ::Real, δ::Real, order::Val)\nneglogpdf_qrician(n::Int, ν::Real, logσ::Real, δ::Real, order::Val)\nneglogpdf_qrician(x::Real, ν::Real, δ::Real, order::Val)\n\nNegative log-probability mass function of the quantized Rician distribution.\n\nFive-parameter form (real-valued argument)\n\nFor sigma = exp(logsigma) and bin width delta, the pmf is\n\np_mathrmQRice(x mid nu sigma delta) = int_x^x+delta p_mathrmRice(y mid nu sigma)  dy\n\nComputes -log p_mathrmQRice(x mid nu sigma delta) using N-point Gauss–Legendre quadrature with order::Val{N} where N ge 1; the case N = 1 reduces to the midpoint rule.\n\nFour-parameter form (unit scale)\n\nThe four-argument method sets sigma = 1 and computes -log p_mathrmQRice(x mid nu sigma = 1 delta).\n\nFive-parameter form (discrete argument)\n\nFor integer argument n::Int, computes the negative log-probability at x = ndelta; equivalent to neglogpdf_qrician(n * δ, ν, logσ, δ, order).\n\nSee neglogpdf_rician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.neglogpdf_rician","page":"Home","title":"FastRicianLikelihoods.neglogpdf_rician","text":"neglogpdf_rician(x::Real, ν::Real, logσ::Real)\nneglogpdf_rician(x::Real, ν::Real)\n\nNegative log-density of the Rician distribution.\n\nThree-parameter form\n\nFor sigma = exp(logsigma), computes the negative log-density -log p_mathrmRice(x mid nu sigma):\n\np_mathrmRice(x mid nu sigma) = fracxsigma^2 expleft(-fracx^2+nu^22sigma^2right) I_0left(fracxnusigma^2right)\n\nwhere I_0 is the modified Bessel function of the first kind of order zero, and x ge 0.\n\nTwo-parameter form (unit scale)\n\nThe two-argument method sets sigma = 1 and computes f(x nu) = -log p_mathrmRice(x mid nu sigma = 1):\n\nf(xnu) coloneqq -log p_mathrmRice(x mid nu sigma = 1) = fracx^2+nu^22 - log x - log I_0(xnu)\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.pdf_rician","page":"Home","title":"FastRicianLikelihoods.pdf_rician","text":"pdf_rician(x::Real, ν::Real, logσ::Real)\npdf_rician(x::Real, ν::Real)\n\nProbability density function of the Rician distribution.\n\nThree-parameter form\n\nFor sigma = exp(logsigma), computes p_mathrmRice(x mid nu sigma) as defined in neglogpdf_rician(x, ν, logσ).\n\nTwo-parameter form (unit scale)\n\nThe two-argument method sets sigma = 1 and computes p_mathrmRice(x mid nu sigma = 1) = exp(-f(x nu)).\n\nSee neglogpdf_rician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.∇neglogpdf_qrician","page":"Home","title":"FastRicianLikelihoods.∇neglogpdf_qrician","text":"∇neglogpdf_qrician(x::Real, ν::Real, δ::Real, order::Val)\n\nGradient of the unit-scale quantized negative log-probability.\n\nComputes g = nabla Omega = (Omega_x Omega_nu Omega_delta) where Omega = -log p_mathrmQRice(x mid nu sigma = 1 delta).\n\nSee neglogpdf_qrician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.∇neglogpdf_qrician_with_primal","page":"Home","title":"FastRicianLikelihoods.∇neglogpdf_qrician_with_primal","text":"∇neglogpdf_qrician_with_primal(x::Real, ν::Real, δ::Real, order::Val)\n\nPrimal value and gradient of the unit-scale quantized negative log-probability.\n\nComputes (Omega g) where\n\nOmega = -log p_mathrmQRice(x mid nu sigma = 1 delta),\ng = nabla Omega = (Omega_x Omega_nu Omega_delta).\n\nSee neglogpdf_qrician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.∇neglogpdf_rician","page":"Home","title":"FastRicianLikelihoods.∇neglogpdf_rician","text":"∇neglogpdf_rician(x::Real, ν::Real)\n\nGradient of the unit-scale negative log-density.\n\nComputes g = (f_x f_nu) where f = -log p_mathrmRice(x mid nu sigma = 1).\n\nSee neglogpdf_rician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.∇pdf_rician","page":"Home","title":"FastRicianLikelihoods.∇pdf_rician","text":"∇pdf_rician(x::Real, ν::Real)\n\nGradient of the unit-scale Rician density with respect to (x nu).\n\nComputes (p_x p_nu) where p = p_mathrmRice(x mid nu sigma = 1).\n\nSee pdf_rician, neglogpdf_rician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.∇²neglogpdf_qrician","page":"Home","title":"FastRicianLikelihoods.∇²neglogpdf_qrician","text":"∇²neglogpdf_qrician(x::Real, ν::Real, δ::Real, order::Val)\n\nHessian of the unit-scale quantized negative log-probability.\n\nComputes H = mathrmvech(nabla^2 Omega) = (Omega_xx Omega_xnu Omega_xdelta Omega_nunu Omega_nudelta Omega_deltadelta) where Omega = -log p_mathrmQRice(x mid nu sigma = 1 delta).\n\nSee neglogpdf_qrician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.∇²neglogpdf_qrician_with_gradient","page":"Home","title":"FastRicianLikelihoods.∇²neglogpdf_qrician_with_gradient","text":"∇²neglogpdf_qrician_with_gradient(x::Real, ν::Real, δ::Real, order::Val)\n\nGradient and Hessian of the unit-scale quantized negative log-probability.\n\nComputes (g H) where\n\ng = nabla Omega = (Omega_x Omega_nu Omega_delta),\nH = mathrmvech(nabla^2 Omega) = (Omega_xx Omega_xnu Omega_xdelta Omega_nunu Omega_nudelta Omega_deltadelta).\n\nSee neglogpdf_qrician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.∇²neglogpdf_qrician_with_primal_and_gradient","page":"Home","title":"FastRicianLikelihoods.∇²neglogpdf_qrician_with_primal_and_gradient","text":"∇²neglogpdf_qrician_with_primal_and_gradient(x::Real, ν::Real, δ::Real, order::Val)\n\nPrimal value, gradient, and Hessian of the unit-scale quantized negative log-probability.\n\nComputes (Omega g H) where\n\nOmega = -log p_mathrmQRice(x mid nu sigma = 1 delta),\ng = nabla Omega = (Omega_x Omega_nu Omega_delta),\nH = mathrmvech(nabla^2 Omega) = (Omega_xx Omega_xnu Omega_xdelta Omega_nunu Omega_nudelta Omega_deltadelta).\n\nSee neglogpdf_qrician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.∇²neglogpdf_rician","page":"Home","title":"FastRicianLikelihoods.∇²neglogpdf_rician","text":"∇²neglogpdf_rician(x::Real, ν::Real)\n\nHessian of the unit-scale negative log-density.\n\nComputes H = (f_xx f_xnu f_nunu) where f = -log p_mathrmRice(x mid nu sigma = 1).\n\nSee neglogpdf_rician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.∇²neglogpdf_rician_with_gradient","page":"Home","title":"FastRicianLikelihoods.∇²neglogpdf_rician_with_gradient","text":"∇²neglogpdf_rician_with_gradient(x::Real, ν::Real)\n\nGradient and Hessian of the unit-scale negative log-density.\n\nComputes (g H) where\n\nf = -log p_mathrmRice(x mid nu sigma = 1)\ng = (f_x f_nu),\nH = (f_xx f_xnu f_nunu),\n\nSee neglogpdf_rician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.∇³neglogpdf_qrician_jacobian_with_primal_gradient_and_hessian","page":"Home","title":"FastRicianLikelihoods.∇³neglogpdf_qrician_jacobian_with_primal_gradient_and_hessian","text":"∇³neglogpdf_qrician_jacobian_with_primal_gradient_and_hessian(x::Real, ν::Real, δ::Real, order::Val)\n\nJacobian of third-order derivatives of the unit-scale quantized negative log-probability.\n\nComputes (Omega g H J) where\n\nOmega = -log p_mathrmQRice(x mid nu sigma = 1 delta),\ng = nabla Omega = (Omega_x Omega_nu Omega_delta),\nH = mathrmvech(nabla^2 Omega) = (Omega_xx Omega_xnu Omega_xdelta Omega_nunu Omega_nudelta Omega_deltadelta),\nJ = nabla H = beginbmatrix Omega_xxx  Omega_xxnu  Omega_xxdelta  Omega_xnu x  Omega_xnunu  Omega_xnudelta  Omega_xdelta x  Omega_xdeltanu  Omega_xdeltadelta  Omega_nunu x  Omega_nununu  Omega_nunudelta  Omega_nudelta x  Omega_nudeltanu  Omega_nudeltadelta  Omega_deltadelta x  Omega_deltadeltanu  Omega_deltadeltadelta endbmatrix in mathbbR^6times 3.\n\nSee neglogpdf_qrician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.∇³neglogpdf_qrician_vjp_with_primal_gradient_and_hessian","page":"Home","title":"FastRicianLikelihoods.∇³neglogpdf_qrician_vjp_with_primal_gradient_and_hessian","text":"∇³neglogpdf_qrician_vjp_with_primal_gradient_and_hessian(Δ::SVector{6, <:Real}, x::Real, ν::Real, δ::Real, order::Val)\n\nVector-Jacobian product for third-order derivatives of the unit-scale quantized negative log-probability.\n\nComputes (Omega g H J^T Delta) where\n\nOmega = -log p_mathrmQRice(x mid nu sigma = 1 delta),\ng = nabla Omega = (Omega_x Omega_nu Omega_delta),\nH = mathrmvech(nabla^2 Omega) = (Omega_xx Omega_xnu Omega_xdelta Omega_nunu Omega_nudelta Omega_deltadelta),\nJ^T Delta = (nabla H)^T Delta = beginbmatrix Omega_xxx  Omega_xnu x  Omega_xdelta x  Omega_nunu x  Omega_nudelta x  Omega_deltadelta x  Omega_xxnu  Omega_xnunu  Omega_xdeltanu  Omega_nununu  Omega_nudeltanu  Omega_deltadeltanu  Omega_xxdelta  Omega_xnudelta  Omega_xdeltadelta  Omega_nunudelta  Omega_nudeltadelta  Omega_deltadeltadelta endbmatrix Delta in mathbbR^3.\n\nSee neglogpdf_qrician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.∇³neglogpdf_rician_with_gradient_and_hessian","page":"Home","title":"FastRicianLikelihoods.∇³neglogpdf_rician_with_gradient_and_hessian","text":"∇³neglogpdf_rician_with_gradient_and_hessian(x::Real, ν::Real)\n\nGradient, Hessian, and third-order partial derivatives of the unit-scale negative log-density.\n\nComputes (g H T) where\n\nf = -log p_mathrmRice(x mid nu sigma = 1).\ng = (f_x f_nu),\nH = (f_xx f_xnu f_nunu),\nT = (f_xxx f_xxnu f_xnunu f_nununu),\n\nSee neglogpdf_rician.\n\n\n\n\n\n","category":"function"},{"location":"#FastRicianLikelihoods.GaussHalfHermite","page":"Home","title":"FastRicianLikelihoods.GaussHalfHermite","text":"GaussHalfHermite\n\nCompute nodes x and weights w for Gauss–Half–Hermite quadrature on [0, ∞) with weight w(x) = x^γ * exp(-x^2).\n\nint_0^infty x^gamma e^-x^2 f(x)  dx approx sum_i=1^N w_i f(x_i)\n\nNumerical method:\n\nStable recurrence coefficients (α_n, β_n) via Ball’s reparameterization g_n and Newton’s method (tridiagonal Jacobian; O(N) per iteration).\nNodes/weights from the symmetric Jacobi matrix via Golub–Welsch.\n\nPublic API:\n\ngausshalfhermite_gw(N, γ; normalize=false) -> x, w\ngausshalfhermite_rec_coeffs(N, γ) -> α, β\n\nReferences:\n\nBall J. (2002) SIAM J. Numer. Anal. 40:2311–2317.\nGolub GH, Welsch JH. (1969) Math. Comp. 23:221–230.\nShizgal B. (1981) J. Comput. Phys. 41:309–328.\nGalant D. (1969) Math. Comp. 23:674–s39.\n\n\n\n\n\n","category":"module"},{"location":"#FastRicianLikelihoods.GaussHalfHermite.gausshalfhermite_gw-Tuple{Int64, Real}","page":"Home","title":"FastRicianLikelihoods.GaussHalfHermite.gausshalfhermite_gw","text":"gausshalfhermite_gw(N, γ; normalize = false) -> (x, w)\n\nNodes x and weights w for N‑point Gauss–Half–Hermite quadrature.\n\nint_0^infty x^gamma e^-x^2 f(x)  dx approx sum_i=1^N w_i f(x_i)\n\nUses the Golub–Welsch algorithm on the symmetric Jacobi matrix from (α, β) coefficients computed by gausshalfhermite_rec_coeffs.\n\nIf normalize=true, rescale weights and nodes to correspond to weighting function w(x) = x^γ * exp(-x^2 / 2) / √(2π) by setting x ← √2 * x and w ← 2^{γ/2} w / √π.\n\nArguments:\n\nN::Integer\nγ::Real (γ > -1)\n\nKeyword arguments:\n\nnormalize::Bool=false\n\nReturns:\n\n(x, w): nodes and weights\n\nExample\n\njulia> x, w = gausshalfhermite_gw(2, 2.0);\n\njulia> f(x) = x^2;\n\njulia> I = dot(w, f.(x));\n\njulia> I ≈ 3 * sqrt(π) / 8 # ∫_{0}^{∞} x^4 * exp(-x^2) dx\ntrue\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.GaussHalfHermite.gausshalfhermite_rec_coeffs-Tuple{Any, Any}","page":"Home","title":"FastRicianLikelihoods.GaussHalfHermite.gausshalfhermite_rec_coeffs","text":"gausshalfhermite_rec_coeffs(N, γ) -> (α, β)\n\nRecurrence coefficients for monic polynomials orthogonal w.r.t. w(x) = x^γ * exp(-x^2) on [0, ∞) using the three-term recurrence formula P_{n+1}(x) = (x - α_n) P_n(x) - β_n P_{n-1}(x).\n\nArguments:\n\nN::Integer: number of coefficients; returns α₀:α_{N-1} and β₀:β_{N-1}\nγ::Real: exponent in the weight (γ > -1)\n\nReturns:\n\n(α, β): diagonal α and off-diagonal squares β of the Jacobi matrix\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.GaussLegendre","page":"Home","title":"FastRicianLikelihoods.GaussLegendre","text":"GaussLegendre\n\nCompute nodes x and weights w for Gauss–Legendre quadrature on [-1, 1].\n\nint_-1^1 f(x)dx approx sum_i=1^n w_i f(x_i)\n\nNumerical method:\n\nFor n ≤ 60, roots are found by Newton’s method; Legendre polynomials are evaluated via a three‑term recurrence.\nFor n > 60, an O(n) asymptotic expansion provides nodes and weights; optional refinement by Newton is available via refine=true.\n\nPublic API:\n\ngausslegendre(n::Integer, ::Type{T} = Float64; refine = true) -> x, w\n\nPorting notes:\n\nAdapted from FastGaussQuadrature.jl (gausslegendre.jl)\nGeneralized from Float64 to arbitrary T.\nAdded refine keyword to control Newton refinement for large n.\n\n\n\n\n\n","category":"module"},{"location":"#FastRicianLikelihoods.GaussLegendre.gausslegendre-Union{Tuple{Integer}, Tuple{T}, Tuple{Integer, Type{T}}} where T","page":"Home","title":"FastRicianLikelihoods.GaussLegendre.gausslegendre","text":"gausslegendre(n::Integer) -> x, w  # nodes, weights\n\nReturn nodes x and weights w of Gauss-Legendre quadrature.\n\nint_-1^1 f(x) dx approx sum_i=1^n w_i f(x_i)\n\nExample\n\njulia> x, w = gausslegendre(3);\n\njulia> f(x) = x^4;\n\njulia> I = dot(w, f.(x));\n\njulia> I ≈ 2/5 # ∫_{-1}^{1} x^4 dx\ntrue\n\n\n\n\n\n","category":"method"}]
}
