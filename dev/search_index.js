var documenterSearchIndex = {"docs":
[{"location":"#FastRicianLikelihoods","page":"Home","title":"FastRicianLikelihoods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for FastRicianLikelihoods.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#FastRicianLikelihoods.Rice","page":"Home","title":"FastRicianLikelihoods.Rice","text":"Rice(ν, σ)\n\nThe Rice distribution with parameters ν and σ has probability density function:\n\nf(x nu sigma) = fracxsigma^2 expleft( frac-(x^2 + nu^2)2sigma^2 right) I_0left( fracxnusigma^2 right)\n\nExternal links:\n\nRice distribution on Wikipedia\n\n\n\n\n\n","category":"type"},{"location":"#FastRicianLikelihoods.besseli1i0-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.besseli1i0","text":"besseli1i0(x::T) where {T <: Union{Float32, Float64}}\n\nRatio of modified Bessel functions of the first kind of orders one and zero, I_1(x)  I_0(x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.besseli2-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.besseli2","text":"besseli2(x::T) where {T <: Union{Float32, Float64}}\n\nModified Bessel function of the first kind of order two, I_2(x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.besseli2x-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.besseli2x","text":"besseli2x(x::T) where {T <: Union{Float32, Float64}}\n\nScaled modified Bessel function of the first kind of order two, I_2(x)*e^-x.\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.logbesseli0x-Tuple{Real}","page":"Home","title":"FastRicianLikelihoods.logbesseli0x","text":"logbesseli0x(x::T) where T <: Union{Float32, Float64}\n\nLog of scaled modified Bessel function of the first kind of order zero, log(I_0(x)*e^-x).\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.GaussHalfHermite","page":"Home","title":"FastRicianLikelihoods.GaussHalfHermite","text":"GaussHalfHermite\n\nCompute nodes x and weights w for Gauss–Half–Hermite quadrature on [0, ∞) with weight w(x) = x^γ * exp(-x^2).\n\nint_0^infty x^gamma e^-x^2 f(x)dx approx sum_i=1^N w_i f(x_i)\n\nNumerical method:\n\nStable recurrence coefficients (α_n, β_n) via Ball’s reparameterization g_n and Newton’s method (tridiagonal Jacobian; O(N) per iteration).\nNodes/weights from the symmetric Jacobi matrix via Golub–Welsch.\n\nExported:\n\ngausshalfhermite_gw(N, γ; normalize=false) -> x, w\ngausshalfhermite_rec_coeffs(N, γ) -> α, β\n\nReferences:\n\nBall J. (2002) SIAM J. Numer. Anal. 40:2311–2317.\nGolub GH, Welsch JH. (1969) Math. Comp. 23:221–230.\nShizgal B. (1981) J. Comput. Phys. 41:309–328.\nGalant D. (1969) Math. Comp. 23:674–s39.\n\n\n\n\n\n","category":"module"},{"location":"#FastRicianLikelihoods.GaussHalfHermite.gausshalfhermite_gw-Tuple{Any, Any}","page":"Home","title":"FastRicianLikelihoods.GaussHalfHermite.gausshalfhermite_gw","text":"gausshalfhermite_gw(N, γ; normalize = false) -> (x, w)\n\nNodes x and weights w for N‑point Gauss–Half–Hermite quadrature.\n\nint_0^infty x^gamma e^-x^2 f(x)dx approx sum_i=1^N w_i f(x_i)\n\nMethod: Golub–Welsch on the symmetric Jacobi matrix from (α, β) computed by gausshalfhermite_rec_coeffs. If normalize=true, scale to weight x^γ * exp(-x^2 / 2) / √(2π) and set x ← √2 * x.\n\nArguments:\n\nN::Integer\nγ::Real (γ > -1)\n\nKeyword arguments:\n\nnormalize::Bool=false\n\nReturns:\n\n(x, w): nodes and weights\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.GaussHalfHermite.gausshalfhermite_rec_coeffs-Tuple{Any, Any}","page":"Home","title":"FastRicianLikelihoods.GaussHalfHermite.gausshalfhermite_rec_coeffs","text":"gausshalfhermite_rec_coeffs(N, γ) -> (α, β)\n\nRecurrence coefficients for monic polynomials orthogonal w.r.t. w(x) = x^γ * exp(-x^2) on [0, ∞).\n\nThree-term recurrence: P_{n+1}(x) = (x - α_n) P_n(x) - β_n P_{n-1}(x)\n\nArguments:\n\nN::Integer: number of coefficients; returns α₀:α_{N-1} and β₀:β_{N-1}\nγ::Real: exponent in the weight (γ > -1)\n\nReturns:\n\n(α, β): diagonal α and off-diagonal squares β of the Jacobi matrix\n\n\n\n\n\n","category":"method"},{"location":"#FastRicianLikelihoods.GaussLegendre","page":"Home","title":"FastRicianLikelihoods.GaussLegendre","text":"GaussLegendre\n\nCompute nodes x and weights w for Gauss–Legendre quadrature on [-1, 1].\n\nint_-1^1 f(x)dx approx sum_i=1^n w_i f(x_i)\n\nNumerical method:\n\nFor n ≤ 60, roots are found by Newton’s method; Legendre polynomials are evaluated via a three‑term recurrence.\nFor n > 60, an O(n) asymptotic expansion provides nodes and weights; optional refinement by Newton is available via refine=true.\n\nPorting notes:\n\nAdapted from FastGaussQuadrature.jl (gausslegendre.jl), generalized from Float64 to arbitrary T.\nAdded refine keyword to control Newton refinement for large n.\nSource: https://github.com/JuliaApproximation/FastGaussQuadrature.jl/blob/b654654677bc254e8f936c54bd2128a6dda57bba/src/gausslegendre.jl\n\nExported:\n\ngausslegendre(n::Integer, ::Type{T}=Float64; refine=true) -> x, w\n\n\n\n\n\n","category":"module"},{"location":"#FastRicianLikelihoods.GaussLegendre.gausslegendre-Union{Tuple{Integer}, Tuple{T}, Tuple{Integer, Type{T}}} where T","page":"Home","title":"FastRicianLikelihoods.GaussLegendre.gausslegendre","text":"gausslegendre(n::Integer) -> x, w  # nodes, weights\n\nReturn nodes x and weights w of Gauss-Legendre quadrature.\n\nint_-1^1 f(x) dx approx sum_i=1^n w_i f(x_i)\n\nExamples\n\njulia> x, w = gausslegendre(3);\n\njulia> f(x) = x^4;\n\njulia> I = dot(w, f.(x));\n\njulia> I ≈ 2/5\ntrue\n\n\n\n\n\n","category":"method"}]
}
